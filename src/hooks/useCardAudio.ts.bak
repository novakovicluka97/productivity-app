'use client'

import { useEffect, useRef } from 'react'
import { useAudioPlayer } from 'react-use-audio-player'
import { getAudioPath, getTrackById } from '@/lib/audioConfig'

interface UseCardAudioProps {
  cardId: string
  selectedTrack?: string
  volume: number
  isMusicPlaying: boolean
  isTimerActive: boolean
}

export function useCardAudio({
  cardId,
  selectedTrack,
  volume,
  isMusicPlaying,
  isTimerActive
}: UseCardAudioProps) {
  const { load, play, pause, stop, playing, setVolume } = useAudioPlayer()
  const currentTrackRef = useRef<string | undefined>(undefined)
  const isActiveRef = useRef(false)

  // Load track when selected track changes
  useEffect(() => {
    if (selectedTrack && selectedTrack !== currentTrackRef.current) {
      const track = getTrackById(selectedTrack)
      if (track) {
        const audioPath = getAudioPath(track.filename)
        load(audioPath, {
          autoplay: false,
          loop: true,
          format: 'mp3'
        })
        currentTrackRef.current = selectedTrack
      }
    }
  }, [selectedTrack, load])

  // Update volume
  useEffect(() => {
    setVolume(volume / 100) // Convert from 0-100 to 0-1
  }, [volume, setVolume])

  // Handle play/pause based on timer and music state
  useEffect(() => {
    const shouldPlay = isTimerActive && isMusicPlaying && selectedTrack

    if (shouldPlay && !playing) {
      play()
    } else if (!shouldPlay && playing) {
      pause()
    }

    isActiveRef.current = shouldPlay
  }, [isTimerActive, isMusicPlaying, selectedTrack, playing, play, pause])

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (isActiveRef.current) {
        stop()
      }
    }
  }, [stop])

  const togglePlayPause = () => {
    if (playing) {
      pause()
    } else if (selectedTrack) {
      play()
    }
  }

  return {
    isPlaying: playing,
    togglePlayPause,
    stop
  }
}